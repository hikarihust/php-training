========================================== Session & Cookie ==========================================
Session: 
	PHP Session cho phép lưu dữ liệu của người dùng trên server để sử dụng ở các lần sau(như username, thông tin đặt hàng..)
	Các thông tin Session này chỉ là tạm thời và thường bị xóa đi ngay khi người dùng rời khỏi trang web đã dùng Session
	Mỗi Session sẽ được cấp một định danh(ID) khác nhau và nội dung được lưu trong thư mục thiết lập trong file php.ini(tham
		số session.save_path)
		session.save_path="C:\xampp\tmp"
		name|s:12:"Nguyen Van B";
	Session hoạt động bằng cách tạo 1 chuỗi unique(UID) cho từng vister và chứa thông tin dựa trên ID đó
	Mỗi trang PHP là 1 chương trình đang chạy trên máy chủ. Khi chương trình bắt đầu chạy, nó yêu cầu hệ điều hành của máy
		chủ cấp cho nó 1 số bộ nhớ để lưu trữ các biến.
	Khi trang được tải xong, hệ điều hành của máy chủ lấy bộ nhớ trở lại -> bộ nhớ của trang sẽ bị xóa -> tất cả các thông 
		tin trên trang đều bị xóa
	Dữ liệu được lưu vào bộ nhớ ở mỗi trang là độc lập với nhau(trang A không truy cập được bộ nhớ của các biến được tạo bởi
		trang B)
		-> Trên server có 1 phần bộ nhớ dùng chung đó là Share memmory
	Thực hành:
		Ghi giá trị của Session
		Đọc giá trị của Session
		Thay đổi lại giá trị của Session mà ta đã lưu trước đó
		Kiểm tra 1 giá trị nào đó nó có tồn tại trong Session hay không
		Xóa Session(trước khi xóa thì kiểm tra xem nó đã tồn tại hay chưa). Xóa thì thực hiện giống như xóa 1 phần tử của mảng
			Muốn xóa tất cả các Session hiện có thì dùng session_destroy = session_unset()
	Session có thể lưu trữ các giá trị gì:
		Lưu biến vào Session
		Lưu mảng vào Session
		Lưu hàm(function) vào Session
			Khi lưu hàm vào Session thì phải dùng eval() để thực thi hàm đó
		Lưu file(nội dung tập tin) vào Session
		Lưu hình ảnh vào Session
			getimagesize(): Để lấy thông tin của phần tử
			file_get_contents(): Lấy nội dung hình ảnh
				Array
				(
						[0] => 284
						[1] => 177
						[2] => 2
						[3] => width="284" height="177"
						[bits] => 8
						[channels] => 3
						[mime] => image/jpeg
				)
				Dựa vào mime để hiển thị hình ảnh: header('Content-type: image/jpeg');
		Lưu đối tượng vào Session
	session_encode() chuyển đổi các nội dung được lưu trong Session thành 1 chuỗi đặc biệt
	session_decode() phân tích chuỗi đặc biệt được chuyển đổi bởi hàm session_encode() và lưu vào Session -> Dùng để phục
		hồi lại session
	Luyện tập:
		Tạo form đăng nhập đăng xuất, khi đăng nhập vào website thì sẽ dùng Session để lưu trữ lại nội dung đăng nhập, thiết 
			lập thời gian xóa session
		file_get_contents(): Trả về nội dung của file
		file(): Chuyển nội dung của file sang thành Array và mỗi phần tử tương đương với mỗi dòng
		Đối với phần file lưu thông tin người dùng:
			john|E10ADC3949BA59ABBE56E057F20F883E|John Smith
			peter|C33367701511B4F6020EC61DED352059|Peter Brown
			mary|C33367701511B4F6020EC61DED352059|Mary Claure
				Nếu lưu dạng này thì phải dùng foreach để duyệt rồi tìm theo giá trị của username -> gây ra chậm cho chương trình
					do đó cách này không được tối ưu
			Để hạn chế được điều này thì dùng file có cấu trúc:
				john = "john|E10ADC3949BA59ABBE56E057F20F883E|John Smith"
				peter = "peter|C33367701511B4F6020EC61DED352059|Peter Brown"
				mary = "mary|C33367701511B4F6020EC61DED352059|Mary Claure"
				-> Dùng parse_ini_file() để parse ra 1 Array
		So sánh các giá trị username và password mà người dùng đã nhập vào, nếu mà nó có tồn tại thì tiến hành lưu vào Session,
			nếu không tồn tại thì đưa người dùng quay trở lại trang login
		Trên trang login dựa vào giá trị $_SESSION['flagPermission'] để biết được người dùng đã truy cập thành công hay chưa
		Trên trang process kiểm tra giá trị $_SESSION['flagPermission'], nếu chưa tồn tại thì mới kiểm tra đến các biến $_POST
			nếu đã tồn tại thì có nghĩa là người dùng đã đăng nhập thành công rồi và ko cần kiểm tra đến các biến $_POST
		Gán timeout cho Session
Cookie:
	PHP session và PHP cookie xét cho cùng đều được sử dụng để lưu trữ dữ liệu của người dùng
	Đối với Session thì các dữ liệu này được lưu tại server, ngược lại đối với cookie các dữ liệu này được lưu trữ ngay tại 
		trình duyệt web của người dùng
	Mỗi browser quản lý và lưu trữ cookie theo cách riêng của nó, cho nên 2 browser cùng truy cập vào 1 website sẽ nhận được 
		2 cookie khác nhau
	Thao tác với cookie:
		Tạo cookie
		Truy cập cookie
		Hủy cookie: 2 cách hủy
			Khi muốn hủy 1 cookie thì chỉ cần set cookie đó mà ko truyền vào giá trị và timeout cho cookie đó
			Set cookie với time ở quá khứ
	Ứng dụng: Hiển thị thời gian cuối cùng truy cập vào trang web
		Kiểm tra khi cookie lưu giá trị time truy cập cuối cùng đã tồn tại hay chưa, nếu chưa thì setcookie, và đã tồn tại rồi
			thì cập nhật lại giá trị cookie

So sánh cookie và session:
	Cookie và session đều được sử dụng để lưu trữ dữ liệu. Tuy nhiên session được lưu tại server, cookie được lưu ở client
	Session bị xóa khi người dùng đóng trình duyệt, cookie bị xóa khi thời gian tồn tại của nó kết thúc.
	Session bảo mật hơn Cookie, cookie được lưu ở client nên nó có thể được chỉnh sửa bởi client

========================================== Cache ==========================================
Quá trình tiếp nhận và hiển thị nội dung trang web:
  Người sử dụng gửi yêu cầu truy cập trang web
  Server tiếp nhận, phân tích và xử lý yêu cầu. Nếu như các yêu cầu có đòi hỏi phần cơ sở dữ liệu thì server sẽ tiếp tục vào
    cơ sở dữ liệu để truy xuất ra nội dung mà người dùng muốn hiển thị
  Sau khi chuẩn bị sẵn các dữ liệu mà người dùng yêu cầu thì server sẽ chuyển dữ liệu về cho người sử dụng
  -> Cơ bản thì việc tiếp nhận và hiển thị nội dung sẽ qua 3 bước. Trong đó thì ở bước 2 và 3 đòi hỏi server phải làm việc
    rất nhiều. Đôi khi những yêu cầu truy vấn đến database do đó sẽ làm chậm đi tốc độ của website
  Để hạn chế việc truy vấn database để website có thể thực thi nhanh đó là sử dụng Cache.
  Cache được sử dụng như 1 trong nhiều giải pháp giúp tăng tốc độ của website(hạn chế việc truy cập vào cơ sở dữ liệu)
  Các kiểu Cache:
    Cache toàn bộ trang web
    Cache từng phần của page
    Cache câu lệnh SQL
  Các hàm thao tác với Cache
    ob_start(): Bật lên bộ nhớ đệm
    ob_get_contents(): Lấy thông tin bộ nhớ đệm
    ob_clean(): Xóa toàn bộ thông tin trong bộ nhớ đệm
    ob_end_flush(): Tắt bộ nhớ đệm
  Khi gọi đến hàm ob_start() thì bộ nhớ đệm sẽ được bật lên và nội dung của trang web nằm giữa ob_start() và ob_end_flush()
    trước khi nó hiển thị lên thì nó sẽ được lưu vào trong bộ nhớ đệm
  Ứng dụng:
    Lưu trữ lại kết quả phần xử lý ít thay đổi vào file index.html, Do đó thay vì mất thời gian cho quá trình xử lý trong
      index.php thì chỉ cần load lên file index.html lưu trữ nội dung cache lên là được
    Ở đây thì dữ liệu được lưu vào file cache không phải lúc nào cũng cố định mà đôi khi nó sẽ thay đổi nhưng sự thay đổi
      đó là không thường xuyên. Do đó cần phải có sự thay đổi thời gian mà chúng ta sử dụng file cache là bao lâu. 
    filectime(): Lấy ra time của 1 file nào đó. Từ đó quy định các file cache hợp lệ là các file cache được tạo tại thời
      điểm hiện tại không quá 1 khoảng time là bao nhiêu. Nếu nó hợp lệ thì chỉ cần đọc nội dung ở trong file cache ra là 
      xong, nếu khi file cache chưa tồn tại thì tiến hành tạo ra nó

========================================== Ajax ==========================================

- Autocomplete: Khi gõ vào ô checkbox thì sẽ liệt kê ra danh sách các cuốn sách nằm ở trong Database, khi liệt kê ra thì
  thực hiện gắn link cho nó. Đây là 1 chức năng thường thấy ở trong phần search. Khi click vào cuốn sách đó thì trang sẽ
    được chuyển sang trang chi tiết về cuốn sách đó
  Trong trường hợp có 1 danh sách quá dài thì không thể sử dụng SelectBox để liệt kê tất cả các giá trị trong database ra 
    mà nên sử dụng Autocomplete
  Trong trường hợp không gắn link cho các tiêu đề của các cuốn sách mà chỉ hiển thị các tiêu đề của các cuốn sách, khi nhấn
    vào 1 tiêu đề nào đó thì tiêu đề đó sẽ nhẩy vào phía trong của ô input và đồng thời Id của cuốn sách đó sẽ được chuyển 
    vào ô textbox ẩn. Nếu trong trường hợp này chúng ta sử dụng Form thì giá trị id này sẽ được chuyển sang trang sử lý
  Giao diện và thiết lập cho plugin:
    1 ô input để nhập từ khóa tìm kiếm(keywords)
      Có hiển gía trị mặc định ban đầu(text)
    1 ô input ẩn để đưa vào id khi sử dùng trường hợp cần id để Post qua 1 trang sử lý nào đó(mID)
    1 thẻ để đưa vào giá trị của kết quả tìm kiếm(results)
    Định dạng cho giao diện
    Box hiển thị kết quả ban đầu chưa có kết quả nên để ẩn đi, lúc nào có kết quả thì mới cho hiện nó lên
    minChar: Khi nhập vào ô tìm kiếm thì số ký tự tối thiểu được thiết lập để số ký tự nhập vào bằng số ký tự này trở đi thì mới bắt đầu
      tìm kiếm
    records: Muốn hiển thị lên bao nhiêu kết quả khi tìm kiếm được trong database
    linkType: Khi hiển thị lên danh sách kết quả thì có gắn link vào kết quả đó hay 
    Khi hiển thị giá trị default(Enter keyword here...) vào trong ô input tìm kiếm thì kiểm tra trong ô đó có rỗng hay không
    Khi click(focus, click) vào ô input tìm kiếm thì toàn bộ giá trị mặc định(Enter keyword here...) trong ô sẽ biến mất đồng thời loại bỏ đi
      thuộc tính css cho input keywords khi hiển thị giá trị default, khi nhấn ra ngoài thì nó lại được hiển thị
    Khi đã focus hoặc click vào ô input keywords rồi nhưng không đưa giá trị gì vào đó mà lại nhấn ra ngoài thì ô input đó vẫ phải hiển thị
      câu thông báo(default) nằm trong input đó -> dùng đến sự kiện blur. Lúc này thì cần kiểm tra xem người dùng có nhập vào ô đó không,
      nếu thì vẫn hiển thị lại giá trị đã nhập, còn không thì sẽ hiển thị lại giá trị default
    setResultPosition(): Thiết lập lại chiều dài của ô results để cho nó vừa bằng với ô input nhập keywords mà thôi. Lúc này thì thẻ results này bị ảnh hưởng bởi
      ô input keyword và cũng không thể biết trước được ô input keyword này dài bao nhiêu, định dạng vị trí dựa vào các giá trị offset() của ô
      input keyword đó -> offset()
      Khi thiết lập vị trí top và left cho ô results thì cần thiết lập 'position': 'absolute' cho nó
    Khi hơ chuột lên các item kết quả tìm kiếm thì nó cần phải đổi màu, khi hơ lên nó thì cần hiển thị con trỏ chuột
    Khi chiều dài của item quá dài thì cũng không thực hiện xuống hàng -> white-space: nowrap đồng thời không cho các ký tự vượt qua khỏi thẻ
      div results bao bọc bên ngoài -> overflow: hidden
      Trong trường họp này thì sẽ không thể hiển thị được hết đoạn text vào li này -> thêm thuộc tính title cho các thẻ li, khi hơ chuột lên
        item này thì title sẽ được hiển thị
	Cơ sở dữ liệu quan tâm đến bảng books với 4 trường đó là: id, name, status và order
  Sự kiện chuột keyup: Khi nhấn phím xuống và nhả phím ra thì lúc đó sẽ thực hiện search
    Khi nhả ,phím lên sẽ kiểm tra chiều dài của chuỗi ký tự được gõ vào ô keyword có lớn hơn giá trị minChar được thiết lập hay không, nếu có
      thì tiến hành gọi Ajax
    Khi gọi Ajax thì tiến hành gửi đi 2 dữ liệu là giá trị nhập vào ô keyword và số records cần lấy là bao nhiêu
  listItem(): Tạo ra đoạn mã html để hiện thị kết quả, nếu kết quả Ajax trả về là rỗng thì hiển thị lên câu thông báo phù hợp, còn nếu có kết
    quả thì hiển thị kết quả lấy được ra từ server
  Khi hiển thị lên kết quả tìm kiếm thì khi mà hơ chuột lên các kết quả tìm kiếm thì tiến hành đổi màu cho nó
  Trong trường hợp không gán link vào cho các item trong hộp hiển thị kết quả tìm kiếm thì khi nhấn vào từng item đó thì sẽ lấy được id của nó
    và đưa vào ô input ẩn và đồng thời lấy ra giá trị title của item đó đưa vào ô input keywords, và đồng thời khi click chọn 1 item như vậy
    thì ô kiển thị kết quả tìm kiếm cũng bị biến mất -> slideUp để tạo hiệu ứng ẩn
  # Khi nhấn chuột lên màn hình(ko còn focus lên ô input keywords nữa) thì phần hiển thị results sẽ được ẩn đi -> slideUp để tạo hiệu ứng ẩn
  Ban đầu ô results là ẩn, khi gõ 2 ký tự vào ô keywords thì records được hiển thị

- Paging: Phân trang bằng Ajax
	Chức năng hiển thị lên các quyển sách
	Chức năng phân trang này ngoài chức năng Next và Previous thì cho phép nhập vào số trang cần đến, nếu nhập vào ký tự nào đó ký tự ko phải 1 số
	nguyên dương lớn hơn 0 và nhỏ hơn hoặc bằng số trang thì sẽ hiển lên câu thông báo giá trị không hợp nệ
	Ngoài ra thì có làm thêm cả chức năng xóa. Khi đang ở trang cuối mà lần lượt xóa đi hết các phần tử ở trên trang đó thì tự động quay trở về
	trang trước đó
	Ngoài chức năng xóa thì có thể mở rộng thêm làm các chức năng như Active, Edit...
	Giao diện:
	1 thẻ div bao bọc tất cả phần phân trang
	1 khối ul-li: Để hiển thị ra danh sách các cuốn sách. Trong các thẻ li có gắn thêm thuộc tính item-id chứa giá trị id của các cuốn sách. 
		Trong li chứa tên của cuốn sách để hiển thị lên giao diện, 1 thẻ <a> để thực hiện chức năng xóa
	1 khối ul-li: Là phần phân trang
		Liệt kê trang hiện thời, tổng số trang -> li
		Previous và Next
		1 ô input để nhẩy đến trang mong muốn